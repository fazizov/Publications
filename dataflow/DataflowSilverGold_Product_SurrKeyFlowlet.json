{
	"name": "DataflowSilverGold_Product_SurrKeyFlowlet",
	"properties": {
		"type": "Flowlet",
		"typeProperties": {
			"sources": [
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "SilverProduct"
				},
				{
					"linkedService": {
						"referenceName": "AzureBlobStorage1",
						"type": "LinkedServiceReference"
					},
					"name": "GoldDimWatermarks"
				}
			],
			"sinks": [],
			"transformations": [
				{
					"name": "Select"
				},
				{
					"name": "Filter1"
				},
				{
					"name": "SurrogateKey1"
				},
				{
					"name": "CalculateKey"
				},
				{
					"name": "AddTableName"
				},
				{
					"name": "CalculateMaxKey"
				},
				{
					"name": "AlterRow"
				},
				{
					"name": "GoldProduct"
				},
				{
					"name": "LastKeyCache"
				},
				{
					"name": "TargetWatermark"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ProductID as integer,",
				"          Name as string,",
				"          ProductNumber as string,",
				"          Color as string,",
				"          StandardCost as decimal(19,4),",
				"          ListPrice as decimal(19,4),",
				"          Size as string,",
				"          Weight as decimal(8,2),",
				"          ProductCategoryID as integer,",
				"          ProductModelID as integer,",
				"          SellStartDate as timestamp,",
				"          SellEndDate as timestamp,",
				"          DiscontinuedDate as timestamp,",
				"          ThumbNailPhoto as binary,",
				"          ThumbnailPhotoFileName as string,",
				"          rowguid as string,",
				"          ModifiedDate as timestamp,",
				"          SourceFileName as string,",
				"          DateInserted as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     container: 'syn-fs',",
				"     folderPath: 'delta/silver/Product') ~> SilverProduct",
				"source(output(",
				"          TableName as string,",
				"          LastKey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'delta',",
				"     container: 'syn-fs',",
				"     folderPath: 'delta/gold/dimWatermarks') ~> GoldDimWatermarks",
				"SilverProduct select(mapColumn(",
				"          ProductID,",
				"          Name,",
				"          ProductNumber,",
				"          Color,",
				"          StandardCost,",
				"          ListPrice,",
				"          Size,",
				"          Weight,",
				"          ProductCategoryID,",
				"          ProductModelID,",
				"          SellStartDate,",
				"          SellEndDate,",
				"          DiscontinuedDate,",
				"          ThumbNailPhoto,",
				"          ThumbnailPhotoFileName,",
				"          rowguid,",
				"          ModifiedDate,",
				"          SourceFileName,",
				"          DateInserted,",
				"          ProductCategory = SilverCategory@Name,",
				"          SourceFileName = SilverCategory@SourceFileName,",
				"          ProductModel = SilverModel@Name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> Select",
				"GoldDimWatermarks filter(TableName==\"DimProduct\") ~> Filter1",
				"Select keyGenerate(output(ProductKey as long),",
				"     startAt: 1L) ~> SurrogateKey1",
				"SurrogateKey1 derive(ProductKey = ProductKey+ toInteger(LastKeyCache#outputs()[1].LastKey)) ~> CalculateKey",
				"CalculateKey derive(TableName = \"DimProduct\") ~> AddTableName",
				"AddTableName aggregate(groupBy(TableName),",
				"     LastKey = max(ProductKey)) ~> CalculateMaxKey",
				"CalculateMaxKey alterRow(updateIf(TableName==\"DimProduct\")) ~> AlterRow",
				"CalculateKey output() ~> GoldProduct",
				"Filter1 output() ~> LastKeyCache",
				"AlterRow output() ~> TargetWatermark"
			]
		}
	}
}